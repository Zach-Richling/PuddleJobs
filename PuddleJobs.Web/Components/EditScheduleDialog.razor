@using CronExpressionDescriptor
@using PuddleJobs.Core.DTOs
@using PuddleJobs.Web.Services
@using static PuddleJobs.Web.Components.CronExpressionBuilder

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" /> Edit Schedule
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="editingSchedule" @bind-IsValid=isFormValid>
            <MudStack Spacing="4">
                <MudTextField T="string" 
                            Label="Schedule Name" 
                            @bind-Value="editingSchedule.Name" 
                            Required 
                            Variant="Variant.Outlined"
                            HelperText="Choose a name that clearly identifies this schedule's purpose" />
                
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudDatePicker @bind-Date=startDate
                                       Label="Start Date"
                                       Variant="Variant.Outlined" Clearable
                                       Placeholder="Optional start date of this schedule" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTimePicker @bind-Time=startTime
                                       Label="Start Time"
                                       Variant="Variant.Outlined" Clearable
                                       Placeholder="Optional start time of this schedule" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudDatePicker @bind-Date=endDate
                                       Label="End Date"
                                       Variant="Variant.Outlined" Clearable
                                       Placeholder="Optional end date of this schedule" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTimePicker @bind-Time=endTime
                                       Label="End Time"
                                       Variant="Variant.Outlined" Clearable
                                       Placeholder="Optional end time of this schedule" />
                    </MudItem>
                </MudGrid>
                
                <CronExpressionBuilder 
                    OnCronExpressionSelected="OnCronExpressionSelected" 
                    InitialCronExpression="@Schedule.CronExpression" />

                <MudTextField T="string" 
                            Label="Cron Expression" 
                            @bind-Value="editingSchedule.CronExpression"
                            Validation='Quartz.CronExpression.IsValidExpression(editingSchedule.CronExpression ?? "")'
                            Variant="Variant.Outlined"
                            HelperText="Enter a valid Quartz.NET cron expression"
                            Adornment="Adornment.End"
                            AdornmentIcon="@Icons.Material.Filled.Schedule" />
                
                @if (!string.IsNullOrEmpty(editingSchedule.CronExpression))
                {
                    <MudAlert Severity="Severity.Info" Dense="true" Class="rounded">
                        <MudText Typo="Typo.body2">
                            @ExpressionDescriptor.GetDescription(editingSchedule.CronExpression, new Options() { ThrowExceptionOnParseError = false })
                        </MudText>
                        @if (editingSchedule.StartDate.HasValue || editingSchedule.EndDate.HasValue)
                        {
                            <MudText Typo="Typo.caption" Class="mt-1">
                                @if (editingSchedule.StartDate.HasValue)
                                {
                                    <span>Starts: @editingSchedule.StartDate.Value.ToString("MMM dd, yyyy hh:mm tt")</span>
                                }
                                @if (editingSchedule.StartDate.HasValue && editingSchedule.EndDate.HasValue)
                                {
                                    <br/>
                                }
                                @if (editingSchedule.EndDate.HasValue)
                                {
                                    <span>Ends: @editingSchedule.EndDate.Value.ToString("MMM dd, yyyy hh:mm tt")</span>
                                }
                            </MudText>
                        }
                    </MudAlert>
                }
            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                 Variant="Variant.Filled"
                 OnClick="SaveChanges"
                 Disabled="@(!isFormValid || isSaving)">
            @(isSaving ? "Saving..." : "Save")
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public required ScheduleDto Schedule { get; set; } 

    [Inject] public required ScheduleService ScheduleService { get; set; }
    [Inject] public required ISnackbar Snackbar { get; set; }

    private UpdateScheduleDto editingSchedule = null!;

    private DateTime? startDate;
    private TimeSpan? startTime;

    private DateTime? endDate;
    private TimeSpan? endTime;

    private bool isSaving = false;
    private bool isFormValid { get; set; }

    protected override void OnParametersSet()
    {
        editingSchedule = new UpdateScheduleDto
        {
            Name = Schedule.Name,
            Description = Schedule.Description,
            CronExpression = Schedule.CronExpression
        };

        startDate = Schedule.StartDate?.Date;
        startTime = Schedule.StartDate?.TimeOfDay;
        if (startTime == TimeSpan.Zero)
        {
            startTime = null;
        }

        endDate = Schedule.EndDate?.Date;
        endTime = Schedule.EndDate?.TimeOfDay;
        if (endTime == TimeSpan.Zero)
        {
            endTime = null;
        }
    }

    private void OnCronExpressionSelected(CronExpressionEventArgs args)
    {
        editingSchedule.CronExpression = args.CronExpression;
        StateHasChanged();
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task SaveChanges()
    {
        isSaving = true;

        try
        {
            editingSchedule.StartDate = startDate.HasValue ? startDate.Value.Date + (startTime ?? TimeSpan.Zero) : null;
            editingSchedule.EndDate = endDate.HasValue ? endDate.Value.Date + (endTime ?? TimeSpan.Zero) : null;

            var result = await ScheduleService.UpdateScheduleAsync(Schedule.Id, editingSchedule);
            
            if (result != null)
            {
                Snackbar.Add($"Schedule '{result.Name}' saved successfully!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(result));
            }
            else
            {
                Snackbar.Add("Failed to save schedule. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving schedule: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSaving = false;
        }
    }
}